#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

import sys
import logging
import argparse
from dorina.config import load_config, set_config
from dorina import utils
from dorina import run

def main():
    parser = argparse.ArgumentParser(description="Run doRiNA from the command line")
    parser.add_argument('--genome', dest='genome',
                        help="genome to work on")
    parser.add_argument('-a', '--set-a', dest='set_a',
                        nargs="+",
                        help="first set of regulators to analyse")
    parser.add_argument('-b', '--set-b', dest='set_b',
                        nargs="+",
                        help="second set of regulators to analyse")
    parser.add_argument('--genes', dest='genes',
                        nargs="+", default=['all'])
    parser.add_argument('--match-a', dest='match_a',
                        choices=['any', 'all'], default='any',
                        help="all or any regulators in set A must match")
    parser.add_argument('--region-a', dest='region_a', default='any',
                        choices=['any', 'CDS', '3prime', '5prime', 'intron', 'intergenic'],
                        help="region to match set A in")
    parser.add_argument('--match-b', dest='match_b',
                        choices=['any', 'all'], default='any',
                        help="all or any regulators in set B must match")
    parser.add_argument('--region-b', dest='region_b', default='any',
                        choices=['any', 'CDS', '3prime', '5prime', 'intron', 'intergenic'],
                        help="region to match set B in")
    parser.add_argument('-C', '--combine', default='or',
                        choices=['and', 'or', 'not', 'xor'],
                        help="set operation to combine set A and set B hits")
    parser.add_argument('-c', '--configfile', dest='configfile',
                        default=argparse.SUPPRESS,
                        help="Load configuration from an alternative file")
    parser.add_argument('-d', '--debug', dest='debug',
                        action='store_true', default=False,
                        help="print debugging information to stderr")
    parser.add_argument('-v', '--verbose', dest='verbose',
                        action='store_true', default=False,
                        help="print verbose status information to stderr")
    parser.add_argument('--list-genomes', dest='list_genomes',
                        action='store_true', default=False,
                        help="print a list of available genomes and exit")
    parser.add_argument('--list-regulators', dest='list_regulators',
                        action='store_true', default=False,
                        help="print a list of available regulators and exit")

    options = parser.parse_args()

    setup_logging(options)

    load_config(options)
    set_config(options)

    if options.list_genomes:
        list_genomes(options.data.path)
        sys.exit(0)

    if options.list_regulators:
        list_regulators(options.data.path)
        sys.exit(0)

    if not 'genome' in options or options.genome is None:
        parser.error("You need to select a genome")

    if not 'set_a' in options or options.set_a is None:
        parser.error("You need to select regulators for set A")


    genome = utils.get_genome_by_name(options.genome, options.data.path)
    if genome is None:
        print "Selected genome %r not found." % options.genome
        list_genomes(options.data.path)
        sys.exit(1)

    set_a = map(lambda x: utils.get_regulator_by_name(x, options.data.path), options.set_a)
    if set_a.count(None) > 0:
        print "Regulator %r not found." % options.set_a[set_a.index(None)]
        list_regulators(options.data.path)
        sys.exit(1)

    result = run.analyse(options.genome, options.set_a, options.match_a,
                         options.region_a, options.set_b, options.match_b,
                         options.region_b, options.combine,
                         datadir=options.data.path)
    print result,
    sys.exit(0)


def setup_logging(options):
    """Set up the logging output"""
    if options.debug:
        log_level = logging.DEBUG
    elif options.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARNING

    logging.basicConfig(format="%(levelname)s: %(message)s",
                        level=log_level)


def list_genomes(datadir):
    """List all available genomes"""
    genomes = utils.get_genomes(datadir)
    print "Available genomes:"
    print "------------------"
    for species, species_dict in genomes.items():
        print "\t%s" % species
        for assembly, assembly_dict in species_dict['assemblies'].items():
            print "\t\t%s" % assembly
            gffs = assembly_dict.items()
            gffs.sort(key=lambda x: x[0])
            for gff in gffs:
                print "\t\t\t%s: %s" % gff


def list_regulators(datadir):
    """List all available regulators"""
    regulators = utils.get_regulators(datadir)
    print "Available regulators:"
    print "---------------------"
    for species, species_dict in regulators.items():
        print "\t%s" % species
        for assembly, assembly_dict in species_dict.items():
            print "\t\t%s" % assembly
            for regulator, regulator_dict in assembly_dict.items():
                print "\t\t\t%s" % regulator

if __name__ == "__main__":
    main()
